name: Create Electron Release

on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Compiles the app but does not upload artifacts to distribution server'
        default: true
        required: false
        type: boolean
      buildType:
        description: 'Build Environment'
        required: true
        default: staging
        type: choice
        options:
          - staging
          - prod

defaults:
  run:
    shell: 'bash'

jobs:
  build_artifacts:
    name: 'Build Electron Artifacts'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-12, ubuntu-latest, windows-latest ]

    steps:
      - uses: actions/checkout@v2

      # Node.js setup
      - uses: actions/setup-node@v3
        with:
          cache: 'yarn'

      # Conditional build environment setup
      - uses: haya14busa/action-cond@v1
        id: buildEnv
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'prod'
          if_false: 'staging'

      # Yarn install with cache
      - uses: c-hive/gha-yarn-cache@v1

      # Install dependencies
      - name: Install dependencies
        run: yarn

      # Build GraphQL
      - name: Build Graph QL
        run: yarn graphql-schemas:build

      # Install rpm for Linux
      - name: Install rpm
        if: runner.os == 'Linux'
        run: sudo apt-get install -y rpm

      # Install jq
      - name: Install jq
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install jq
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install jq
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install jq
          fi

      # Extract version number from package.json
      - name: Extract version number
        run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV
        id: version

      # Install Electron dependencies and build
      - name: Install and Build Electron
        working-directory: packages/floro-desktop
        run: |
          yarn install
          yarn postinstall:manual
          yarn build
        env:
          BUILD_ENV: ${{ steps.buildEnv.outputs.value }}

      # Compile artifacts
      - name: Compile artifacts
        working-directory: packages/floro-desktop
        run: npx --no-install electron-builder --config .electron-builder.config.js --publish never
        env:
          BUILD_ENV: ${{ steps.buildEnv.outputs.value }}

      # Upload artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifact
          path: packages/floro-desktop/dist/*

  create_release:
    name: 'Create and Upload Release'
    needs: build_artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.buildType == 'prod' && github.event.inputs.dry-run == 'false'
    steps:
      - uses: actions/checkout@v2

      # Create GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          draft: false
          prerelease: false
          release_name: ${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Download artifacts
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      # Upload each artifact to the release
      - name: Upload Artifacts to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.zip
          asset_name: ${{ runner.os }}-artifact.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
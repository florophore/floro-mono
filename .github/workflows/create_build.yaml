name: Create Build

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build Environment'
        required: true
        default: staging
        type: choice
        options:
          - staging
          - prod
jobs:
  sync-artifacts:
    name: 'Sync Artifacts'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: haya14busa/action-cond@v1
        id: bucketName
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'floro-static-assets-prod'
          if_false: 'floro-static-assets-staging'
      - uses: haya14busa/action-cond@v1
        id: cdnHost
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'https://static-cdn.floro.io'
          if_false: 'https://static-cdn.floro-staging.com'
      - uses: haya14busa/action-cond@v1
        id: viteHost
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'floro.io'
          if_false: 'floro-staging.com'
      - uses: haya14busa/action-cond@v1
        id: viteBuildEnvNormalized
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'production'
          if_false: 'staging'
      - uses: haya14busa/action-cond@v1
        id: awsAccessKeyId
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          if_false: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
      - uses: haya14busa/action-cond@v1
        id: awsSecretAccessKey
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          if_false: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
      - name: Yarn install cache
        uses: c-hive/gha-yarn-cache@v1

      - name: Install dependencies
        run: yarn

      - name: Add Floro CLI
        run: npm install -g floro

      - name: Build Floro Assets
        working-directory: packages/common-generators
        run: floro module build
        env:
          FLORO_REMOTE_API_KEY: ${{ secrets.FLORO_REMOTE_API_KEY }}

      - name: Build Graph QL
        run: yarn graphql-schemas:build

      - name: Build Main
        run: CDN_HOST=${{ steps.cdnHost.outputs.value }} VITE_HOST=${{ steps.viteHost.outputs.value }} VITE_IS_SECURE=true VITE_BUILD_ENV_NORMALIZED=${{ steps.viteBuildEnvNormalized.outputs.value }} yarn main build

      - name: Push build to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks
        env:
          AWS_S3_BUCKET: ${{ steps.bucketName.outputs.value }}
          AWS_ACCESS_KEY_ID: ${{ steps.awsAccessKeyId.outputs.value }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.awsSecretAccessKey.outputs.value }}
          SOURCE_DIR: 'packages/main/dist/client'
  build-image:
    name: 'Build Image & Push to ECR'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: haya14busa/action-cond@v1
        id: repositoryName
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'floro-prod'
          if_false: 'floro-staging'
      - uses: haya14busa/action-cond@v1
        id: cdnHost
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'https://static-cdn.floro.io'
          if_false: 'https://static-cdn.floro-staging.com'
      - uses: haya14busa/action-cond@v1
        id: viteHost
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'floro.io'
          if_false: 'floro-staging.com'
      - uses: haya14busa/action-cond@v1
        id: viteBuildEnvNormalized
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'production'
          if_false: 'staging'
      - uses: haya14busa/action-cond@v1
        id: awsAccessKeyId
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          if_false: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
      - uses: haya14busa/action-cond@v1
        id: awsSecretAccessKey
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          if_false: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.awsAccessKeyId.outputs.value }}
          aws-secret-access-key: ${{ steps.awsSecretAccessKey.outputs.value }}
          aws-region: us-east-1

      - name: Set tag var
        id: vars
        run: echo "docker_tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Echo tag var
        run: echo "${{ steps.vars.outputs.docker_tag }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.repositoryName.outputs.value }}
          IMAGE_TAG: ${{ steps.vars.outputs.docker_tag }}
        run: |
          docker build --build-arg vite_is_secure_arg=true --build-arg vite_host_arg=${{ steps.viteHost.outputs.value }} --build-arg cdn_host_arg=${{ steps.cdnHost.outputs.value }} --build-arg vite_build_env_normalized_arg=${{ steps.viteBuildEnvNormalized.outputs.value }} --build-arg floro_remote_api_key_arg=${{ secrets.FLORO_REMOTE_API_KEY }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
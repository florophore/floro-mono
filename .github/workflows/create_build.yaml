name: Create Build

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build Environment'
        required: true
        default: staging
        type: choice
        options:
          - staging
          - prod
jobs:
  sync-artifacts:
    name: 'Sync Artifacts'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: haya14busa/action-cond@v1
        id: bucketName
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'floro-static-assets-prod'
          if_false: 'floro-static-assets-staging'
      - uses: haya14busa/action-cond@v1
        id: cdnHost
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'https://static-cdn.floro.com'
          if_false: 'https://static-cdn.floro-staging.com'
      - name: Yarn install cache
        uses: c-hive/gha-yarn-cache@v1

      - name: Install dependencies
        run: yarn

      - name: Build Main
        run: CDN_HOST=${{ steps.cdnHost.outputs.value }} yarn build:main

      - name: Push build to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks
        env:
          AWS_S3_BUCKET: ${{ steps.bucketName.outputs.value }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: 'packages/main/dist/client'
  build-image:
    name: 'Build Image & Push to ECR'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: haya14busa/action-cond@v1
        id: repositoryName
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'floro-prod'
          if_false: 'floro-staging'
      - uses: haya14busa/action-cond@v1
        id: cdnHost
        with:
          cond: ${{ github.event.inputs.buildType == 'prod' }}
          if_true: 'https://static-cdn.floro.com'
          if_false: 'https://static-cdn.floro-staging.com'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.repositoryName.outputs.value }}
          IMAGE_TAG: floro:$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -b -8)
        run: |
          docker build --build-arg cdn_host_arg=${{ steps.cdnHost.outputs.value }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
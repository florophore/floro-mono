type User {
    id: ID
    firstName: String
    lastName: String
    username: String
    organizations: [Organization] 
    freeDiskSpaceBytes: Float
    diskSpaceLimitBytes: Float
    utilizedDiskSpaceBytes: Float
}

type UsernameCheckResult {
    exists: Boolean
    username: String
}

type RejectOrganizationInvitationSuccess {
  organizationInvitation: OrganizationInvitation
}

type RejectOrganizationInvitationError {
  message: String
  type: String
}

union RejectInvitationOrganizationResponse =
    RejectOrganizationInvitationError
  | RejectOrganizationInvitationSuccess
  | UnAuthenticatedError

type AcceptOrganizationInvitationSuccess {
  organizationInvitation: OrganizationInvitation
}

type AcceptOrganizationInvitationError {
  message: String
  type: String
}

union AcceptInvitationOrganizationResponse =
    AcceptOrganizationInvitationError
  | AcceptOrganizationInvitationSuccess
  | UnAuthenticatedError
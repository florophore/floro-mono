type Organization {
  id: ID
  name: String
  legalName: String
  handle: String
  contactEmail: String
  invitationsSentCount: Int
  membersActiveCount: Int
  membersCount: Int
  activeAdminCount: Int
  remainingSeats: Int
  freeDiskSpaceBytes: Float
  diskSpaceLimitBytes: Float
  utilizedDiskSpaceBytes: Float
  billingStatus: String
  billingPlan: String

  membership: OrganizationMember
  roles: [OrganizationRole]
  membersResult(id: ID, query: String, filterOutDeactivated: Boolean): PaginatedOrganizationMembers
  invitationsResult(id: ID, query: String): PaginatedOrganizationInvitations

  publicRepositories: [Repository]
  privateRepositories: [Repository]

  profilePhoto: Photo

  publicPlugins: [Plugin]
  privatePlugins: [Plugin]
  pluginCount: Int
}

type PaginatedOrganizationMembers {
  id: ID
  nextId: ID
  lastId: ID
  members: [OrganizationMember]
}

type PaginatedOrganizationInvitations {
  id: ID
  nextId: ID
  lastId: ID
  invitations: [OrganizationInvitation]
}

type OrganizationMember {
  id: ID
  internalHandle: String
  membershipState: String
  user: User
  organization: Organization
  permissions: OrganizationPermissions
  roles: [OrganizationRole]
  createdAt: DateTime
}

type OrganizationInvitation {
  id: ID
  firstName: String
  lastName: String
  email: String
  invitationState: String
  createdAt: DateTime
  updatedAt: DateTime

  user: User
  invitedByUser: User
  invitedByOrganizationMember: User
  organization: Organization
  roles: [OrganizationRole]
}

type OrganizationRole {
  id: ID
  name: String
  isMutable: Boolean
  isDefault: Boolean
  canCreateRepos: Boolean
  canModifyOrganizationSettings: Boolean
  canModifyOrganizationDeveloperSettings: Boolean
  canModifyOrganizationMembers: Boolean
  canInviteMembers: Boolean
  canModifyInvites: Boolean
  canModifyOwnInternalHandle: Boolean
  canModifyBilling: Boolean

  canRegisterPlugins: Boolean
  canUploadPlugins: Boolean
  canReleasePlugins: Boolean

  canModifyOrganizationRoles: Boolean
  canAssignRoles: Boolean

  organization: Organization
  createdByUser: User
  createdByOrganizationMember: OrganizationMember
}

type OrganizationPermissions {
  canCreateRepos: Boolean
  canModifyOrganizationSettings: Boolean
  canModifyOrganizationDeveloperSettings: Boolean
  canModifyOrganizationMembers: Boolean
  canInviteMembers: Boolean
  canModifyInvites: Boolean
  canModifyOwnInternalHandle: Boolean
  canModifyBilling: Boolean
  canRegisterPlugins: Boolean
  canUploadPlugins: Boolean
  canReleasePlugins: Boolean
  canModifyOrganizationRoles: Boolean
  canAssignRoles: Boolean
}

type CreateOrganizationSuccess {
  organization: Organization
  user: User
}

type CreateOrganizationError {
  message: String
  type: String
}

union CreateOrganizationResponse =
    CreateOrganizationError
  | CreateOrganizationSuccess
  | UnAuthenticatedError

type UpdateOrganizationNameSuccess {
  organization: Organization
}

type UpdateOrganizationNameError {
  message: String
  type: String
}

union UpdateOrganizationNameResponse =
    UpdateOrganizationNameError
  | UpdateOrganizationNameSuccess
  | UnAuthenticatedError

type CreateOrganizationInvitationSuccess {
  organizationInvitation: OrganizationInvitation
  organization: Organization
}

type CreateOrganizationInvitationError {
  message: String
  type: String
}

type CreateOrganizationInvitationSuccess {
  organizationInvitation: OrganizationInvitation
  organization: Organization
}

type CreateOrganizationInvitationError {
  message: String
  type: String
}

union CreateInvitationOrganizationResponse =
    CreateOrganizationInvitationError
  | CreateOrganizationInvitationSuccess
  | UnAuthenticatedError

type CancelOrganizationInvitationSuccess {
  organizationInvitation: OrganizationInvitation
  organization: Organization
}

type CancelOrganizationInvitationError {
  message: String
  type: String
}

union CancelInvitationOrganizationResponse =
    CancelOrganizationInvitationError
  | CancelOrganizationInvitationSuccess
  | UnAuthenticatedError


type UpdateOrganizationInvitationSuccess {
  organizationInvitation: OrganizationInvitation
  organization: Organization
}

type UpdateOrganizationInvitationError {
  message: String
  type: String
}

union UpdateInvitationOrganizationResponse =
    UpdateOrganizationInvitationError
  | UpdateOrganizationInvitationSuccess
  | UnAuthenticatedError

type ResendOrganizationInvitationSuccess {
  organizationInvitation: OrganizationInvitation
  organization: Organization
}

type ResendOrganizationInvitationError {
  message: String
  type: String
}

union ResendInvitationOrganizationResponse =
    ResendOrganizationInvitationError
  | ResendOrganizationInvitationSuccess
  | UnAuthenticatedError

type DeactivateOrganizationMemberSuccess {
  organizationMember: OrganizationMember
  organization: Organization
}

type DeactivateOrganizationMemberError {
  message: String
  type: String
}

union DeactivateOrganizationMemberResponse =
    DeactivateOrganizationMemberError
  | DeactivateOrganizationMemberSuccess
  | UnAuthenticatedError

type ReactivateOrganizationMemberSuccess {
  organizationMember: OrganizationMember
  organization: Organization
}

type ReactivateOrganizationMemberError {
  message: String
  type: String
}

union ReactivateOrganizationMemberResponse =
    ReactivateOrganizationMemberError
  | ReactivateOrganizationMemberSuccess
  | UnAuthenticatedError

type UpdateOrganizationMemberSuccess {
  organizationMember: OrganizationMember
  organization: Organization
}

type UpdateOrganizationMemberError {
  message: String
  type: String
}

union UpdateOrganizationMemberResponse =
    UpdateOrganizationMemberError
  | UpdateOrganizationMemberSuccess
  | UnAuthenticatedError

type CreateOrganizationRoleSuccess {
  organizationRole: OrganizationRole
  organization: Organization
}

type CreateOrganizationRoleError {
  message: String
  type: String
}

union CreateOrganizationRoleResponse =
    CreateOrganizationRoleError
  | CreateOrganizationRoleSuccess
  | UnAuthenticatedError

type UpdateOrganizationRoleSuccess {
  organizationRole: OrganizationRole
  organization: Organization
}

type UpdateOrganizationRoleError {
  message: String
  type: String
}

union UpdateOrganizationRoleResponse =
    UpdateOrganizationRoleError
  | UpdateOrganizationRoleSuccess
  | UnAuthenticatedError

type RemoveOrganizationRoleSuccess {
  organizationRole: OrganizationRole
  organization: Organization
}

type RemoveOrganizationRoleError {
  message: String
  type: String
}

union RemoveOrganizationRoleResponse =
    RemoveOrganizationRoleError
  | RemoveOrganizationRoleSuccess
  | UnAuthenticatedError

type InviteSearchResultSuccess {
  query: String
  users: [User]
}

type InviteSearchResultError {
  message: String
  type: String
}

union InviteSearchResultResponse =
    InviteSearchResultError
  | InviteSearchResultSuccess
  | UnAuthenticatedError
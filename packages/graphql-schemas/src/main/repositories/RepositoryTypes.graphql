type Repository {
  id: ID
  hashKey: UUID
  name: String
  repoType: String
  isPrivate: Boolean
  licenseCode: String
  user: User
  organization: Organization
  lastRepoUpdateAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  branchState(branchId: ID): BranchState
  repoBranches: [RepoBranch]
}

type RepoBranch {
  id: ID
  name: String
  lastCommit: String
  baseBranchId: String
  createdBy: String
  createdByUsername: String
  createdAt: String
  updatedAt: String
}

type CommitInfo {
  sha: ID
  parent: String
  historicalParent: ID
  idx: Int
  message: String
  userId: String
  username: String
  authorUserId: String
  authorUsername: String
  timestamp: DateTime
  kvLink: String
  stateLink: String
  repositoryId: String
  isReverted: Boolean
  isValid: Boolean
}

type BranchState {
  branchId: ID
  repositoryId: ID
  defaultBranchId: ID
  name: String
  branchHead: String
  updatedAt: String
  commitState(sha: ID): CommitState
  commits(idx: Int): [CommitInfo]
  commitSearch(searchQuery: String): [CommitInfo]
  commitsSize: Int
}

type CommitState {
  sha: ID
  message: String
  username: String
  userId: String
  authorUsername: String
  authorUserId: String
  idx: Int
  repositoryId: String
  branchHead: String
  branchId: ID

  kvLink: String
  stateLink: String
  isReverted: Boolean
  isValid: Boolean

  canRevert: Boolean
  canAutoFix: Boolean

  pluginVersions: [PluginVersion]
  binaryRefs: [String]
}

type CreateUserRepositorySuccess {
  repository: Repository
  user: User
}

type CreateUserRepositoryError {
  message: String
  type: String
}

union CreateUserRepositoryResponse =
    CreateUserRepositorySuccess
  | CreateUserRepositoryError
  | UnAuthenticatedError

type CreateOrganizationRepositorySuccess {
  repository: Repository
  organization: Organization
}

type CreateOrganizationRepositoryError {
  message: String
  type: String
}

union CreateOrganizationRepositoryResponse =
    CreateOrganizationRepositorySuccess
  | CreateOrganizationRepositoryError
  | UnAuthenticatedError

type FetchRepositorySuccess {
  repository: Repository
}

type FetchRepositoryError {
  message: String
  type: String
}

union FetchRepositoryReponse =
    FetchRepositorySuccess
  | FetchRepositoryError
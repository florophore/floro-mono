type Repository {
  id: ID
  hashKey: UUID
  name: String
  repoType: String
  isPrivate: Boolean
  licenseCode: String
  user: User
  organization: Organization
  lastRepoUpdateAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type CreateUserRepositorySuccess {
  repository: Repository
  user: User
}

type CreateUserRepositoryError {
  message: String
  type: String
}

union CreateUserRepositoryResponse =
    CreateUserRepositorySuccess
  | CreateUserRepositoryError
  | UnAuthenticatedError

type CreateOrganizationRepositorySuccess {
  repository: Repository
  organization: Organization
}

type CreateOrganizationRepositoryError {
  message: String
  type: String
}

union CreateOrganizationRepositoryResponse =
    CreateOrganizationRepositorySuccess
  | CreateOrganizationRepositoryError
  | UnAuthenticatedError

type FetchRepositorySuccess {
  repository: Repository
}

type FetchRepositoryError {
  message: String
  type: String
}

union FetchRepositoryReponse =
    FetchRepositorySuccess
  | FetchRepositoryError
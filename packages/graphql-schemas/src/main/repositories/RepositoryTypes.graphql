type Repository {
  id: ID
  hashKey: UUID
  name: String
  repoType: String
  isPrivate: Boolean
  licenseCode: String
  user: User
  organization: Organization
  lastRepoUpdateAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  branchState(branchId: ID): BranchState
  repoBranches: [RepoBranch]
  openUserBranchesWithoutMergeRequests(filterIgnored: Boolean): [RepoBranch]
  openUserBranchesWithoutMergeRequestsCount: Int
  openUserMergeRequestsCount: Int
  openBranchesWithoutMergeRequests: [RepoBranch]
  openBranchesWithoutMergeRequestsCount: Int
  openMergeRequests(mode: String, id: ID, openQuery: String): MergeRequestPaginatedResult
  openMergeRequestsCount: Int
  closedMergeRequests(mode: String, id: ID, closedQuery: String): MergeRequestPaginatedResult
  closedMergeRequestsCount: Int
  mergeRequest(id: ID): MergeRequest
  repoPermissions: RepoPermissions

  #repo settings
  defaultBranchId: String

  anyoneCanRead: Boolean #if public, this is always true
  canReadUsers: [User]
  canReadRoles: [OrganizationRole]

  allowExternalUsersToPush: Boolean
  anyoneCanPushBranches: Boolean # if private org, this is true, if public org, this is true for org,
                                 # if private user, this is never true
  canPushBranchesUsers: [User]
  canPushBranchesRoles: [OrganizationRole]

  anyoneCanChangeSettings: Boolean # if org, must be org member, if user must be user, not relevant to user repos
  canChangeSettingsUsers: [User]
  canChangeSettingsRoles: [OrganizationRole]

  canTurnOffAnyoneCanChangeSettings: Boolean
  canTurnOffAnyoneCanRead: Boolean

  protectedBranchRules: [ProtectedBranchRule]
  protectedBranchRule(protectedBranchRuleId: ID): ProtectedBranchRule
}

type ProtectedBranchRule {
  id: ID
  repositoryId: String

  branchId: String
  branchName: String

  disableDirectPushing: Boolean
  requireApprovalToMerge: Boolean
  requireReapprovalOnPushToMerge: Boolean

  automaticallyDeleteMergedFeatureBranches: Boolean

  anyoneCanCreateMergeRequests: Boolean
  canCreateMergeRequestsUsers: [User]
  canCreateMergeRequestsRoles: [OrganizationRole]

  anyoneCanMergeMergeRequests: Boolean
  canMergeMergeRequestsUsers: [User]
  canMergeMergeRequestsRoles: [OrganizationRole]

  anyoneWithApprovalCanMerge: Boolean
  withApprovalCanMergeUsers: [User] # if public, can be anyone
  withApprovalCanMergeRoles: [OrganizationRole]

  anyoneCanApproveMergeRequests: Boolean # if org, must be org member, if user must be user
  canApproveMergeRequestsUsers: [User] # if public, can be anyone
  canApproveMergeRequestsRoles: [OrganizationRole]

  anyoneCanRevert: Boolean # if org, must be org member, if user must be user
  canRevertUsers: [User]
  canRevertRoles: [OrganizationRole]

  anyoneCanAutofix: Boolean # if org, must be org member, if user must be user
  canAutofixUsers: [User]
  canAutofixRoles: [OrganizationRole]

}

type RepoPermissions {
  canPushBranches: Boolean
  canChangeSettings: Boolean
}

type RepoBranch {
  id: ID
  name: String
  lastCommit: String
  baseBranchId: String
  createdBy: String
  createdByUsername: String
  createdAt: String
  updatedAt: String
}

type CommitInfo {
  sha: ID
  originalSha: String
  parent: String
  historicalParent: ID
  idx: Int
  message: String
  userId: String
  username: String
  authorUserId: String
  authorUsername: String
  timestamp: DateTime
  kvLink: String
  stateLink: String
  repositoryId: String
  isReverted: Boolean
  isValid: Boolean
  user: User
  authorUser: User
  updatedAt: DateTime
}

type BranchState {
  branchId: ID
  repositoryId: String
  defaultBranchId: String
  baseBranchId: String
  name: String
  branchHead: String
  updatedAt: String
  commitState(sha: ID): CommitState
  commits(idx: Int, searchQuery: String): [CommitInfo]
  commitSearch(searchQuery: String): [CommitInfo]
  commitsSize: Int
  proposedMergeRequest(idx: Int): ProposedMergeRequest
}

type ProposedMergeRequest {
  baseBranch: RepoBranch
  divergenceState: CommitState
  isConflictFree: Boolean
  isMerged: Boolean
  canMerge: Boolean
  existingMergeRequest: MergeRequest
  canCreateMergeRequest: Boolean
  pendingCommits: [CommitInfo]
  suggestedTitle: String
  suggestedDescription: String
  pendingCommitsCount: Int
}

type BinaryRef {
  fileName: ID
  url: String
}

type CommitState {
  sha: ID
  originalSha: String
  message: String
  username: String
  userId: String
  authorUsername: String
  authorUserId: String
  idx: Int
  repositoryId: String
  branchHead: String
  branchId: String
  lastUpdatedAt: String

  kvLink: String
  stateLink: String
  isReverted: Boolean
  isValid: Boolean

  canRevert: Boolean
  canAutoFix: Boolean

  pluginVersions: [PluginVersion]
  binaryRefs: [BinaryRef]

  user: User
  authorUser: User
}

type CreateUserRepositorySuccess {
  repository: Repository
  user: User
}

type CreateUserRepositoryError {
  message: String
  type: String
}

type RepoAccessError {
    type: String
    message: String
}

union CreateUserRepositoryResponse =
    CreateUserRepositorySuccess
  | CreateUserRepositoryError
  | UnAuthenticatedError

type CreateOrganizationRepositorySuccess {
  repository: Repository
  organization: Organization
}

type CreateOrganizationRepositoryError {
  message: String
  type: String
}

union CreateOrganizationRepositoryResponse =
    CreateOrganizationRepositorySuccess
  | CreateOrganizationRepositoryError
  | UnAuthenticatedError

type FetchRepositorySuccess {
  repository: Repository
}

type FetchRepositoryError {
  message: String
  type: String
}

union FetchRepositoryReponse =
    FetchRepositorySuccess
  | FetchRepositoryError

type IgnoreBranchSuccess {
  repository: Repository
}

type IgnoreBranchError {
  message: String
  type: String
}

union IgnoreBranchReponse =
    IgnoreBranchSuccess
  | IgnoreBranchError
  | UnAuthenticatedError
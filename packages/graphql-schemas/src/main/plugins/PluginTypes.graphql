type Plugin {
  id: ID
  name: String
  ownerType: String
  isPrivate: Boolean
  user: User
  organization: Organization
  createdByUser: User
  createdAt: DateTime
  updatedAt: DateTime
  versions(repositoryId: ID): [PluginVersion]

  # DERIVED PROPS
  displayName: String
  lightIcon: String
  darkIcon: String
  selectedLightIcon: String
  selectedDarkIcon: String
  lastReleasedPublicVersion: PluginVersion
  lastReleasedPrivateVersion: PluginVersion
}

type PluginVersion {
  id: ID
  name: String
  version: String
  manifest: String
  isPrivate: Boolean
  isBackwardsCompatible: Boolean
  previousReleaseVersion: String
  entryUrl: String
  codeDocsUrl: String
  codeRepoUrl: String
  lightIcon: String
  darkIcon: String
  selectedLightIcon: String,
  selectedDarkIcon: String,
  displayName: String
  description: String
  ownerType: String
  user: User
  organization: Organization
  state: String
  pluginDependencies: [PluginVersion]
  pluginId: ID

  createdAt: DateTime
  updatedAt: DateTime
}

type FetchPluginResult {
    plugin: Plugin
}

union FetchPluginResponse = FetchPluginResult | UnAuthenticatedError

type FetchSuggestedPluginsResult {
    plugins: [Plugin]
}

union FetchSuggestedPluginsResponse = FetchSuggestedPluginsResult | UnAuthenticatedError

type PluginCheckResult {
    exists: Boolean
    pluginName: String
}

type PluginSearchResult {
    plugins: [Plugin]
}

type PluginDependencyResult {
    plugins: [Plugin]
}

union PluginDependencyResultResponse =
    PluginDependencyResult
  | UnAuthenticatedError

type CreateUserPluginSuccess {
  plugin: Plugin
  user: User
}

type CreateUserPluginError {
  message: String
  type: String
}

union CreateUserPluginResponse =
    CreateUserPluginSuccess
  | CreateUserPluginError
  | UnAuthenticatedError

type CreateOrganizationPluginSuccess {
  plugin: Plugin
  organization: Organization
}

type CreateOrganizationPluginError {
  message: String
  type: String
}

union CreateOrganizationPluginResponse =
    CreateOrganizationPluginSuccess
  | CreateOrganizationPluginError
  | UnAuthenticatedError

type ReleaseUserPluginSuccess {
  plugin: Plugin
  pluginVersion: PluginVersion
  user: User
}

type ReleaseUserPluginError {
  message: String
  type: String
}

union ReleaseUserPluginResponse =
    ReleaseUserPluginSuccess
  | ReleaseUserPluginError
  | UnAuthenticatedError

type ReleaseOrgPluginSuccess {
  plugin: Plugin
  pluginVersion: PluginVersion
  organization: Organization
}

type ReleaseOrgPluginError {
  message: String
  type: String
}

union ReleaseOrgPluginResponse =
    ReleaseOrgPluginSuccess
  | ReleaseOrgPluginError
  | UnAuthenticatedError